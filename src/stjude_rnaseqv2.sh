#!/bin/bash
# stjude_rnaseqv2 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of input_bam: '$input_bam'"
    echo "Value of strand: '$strand'"
    echo "Value of output_prefix: '$output_prefix'"

    # Install conda
    #pypath=$PYTHONPATH
    #orig_path=$PATH
    #export PYTHONPATH=
    wget "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" -O miniconda.sh 
    chmod a+x miniconda.sh 
       ./miniconda.sh -b -p /opt/conda/ 
       rm miniconda.sh

    PATH=/opt/conda/bin:$PATH
    conda init bash
    conda update -n base -c defaults conda -y && \
       conda install \
       -c conda-forge \
       -c bioconda \
       miniwdl==0.7.5 \
       docker-py==4.2.2 \
       -y && \
       conda clean --all -y
 
    if [ -z "$output_prefix" ]
    then 
       output_prefix=$(basename $input_bam_name ".bam")
    fi 

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$input_bam" -o $input_bam_name


    dx download project-F5444K89PZxXjBqVJ3Pp79B4:file-Fp2yqv89F80fgz96KBBfvK0V -o gencode.gtf.gz 
    dx download project-F5444K89PZxXjBqVJ3Pp79B4:file-Fjvvg9j9p5b17Y0p3gKYPPxY -o STARDB.tar.gz

    
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.


    miniwdl run -d $HOME/output https://raw.githubusercontent.com/stjudecloud/workflows/master/workflows/rnaseq/rnaseq-standard.wdl gencode_gtf=gencode.gtf.gz input_bam=$input_bam_name stardb_tar_gz=STARDB.tar.gz strand=$strand output_prefix=$output_prefix detect_nproc=true validate_input=false bam_to_fastqs.split.reject_unaccounted=false > output.json

    counts=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.gene_counts"]')
    bam=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.bam"]')
    index=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.bam_index"]')
    log=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.star_log"]')
    stranded=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.inferred_strandedness"]')
    coverage=$(cat output.json |jq ".outputs" | jq -r '.["rnaseq_standard.bigwig"]')


    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    bam=$(dx upload $bam --brief)
    bam_index=$(dx upload $index --brief)
    star_log=$(dx upload $log --brief)
    gene_counts=$(dx upload $counts --brief)
    inferred_strandedness=$(dx upload $stranded --brief)
    bigwig=$(dx upload $coverage --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output bam "$bam" --class=file
    dx-jobutil-add-output bam_index "$bam_index" --class=file
    dx-jobutil-add-output star_log "$star_log" --class=file
    dx-jobutil-add-output gene_counts "$gene_counts" --class=file
    dx-jobutil-add-output inferred_strandedness "$inferred_strandedness" --class=file
    dx-jobutil-add-output bigwig "$bigwig" --class=file
}
